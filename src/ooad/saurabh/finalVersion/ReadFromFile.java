package ooad.saurabh.finalVersion;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Map.Entry;

public class ReadFromFile {
	
	private List<String> movesFromFile = new ArrayList<String>(); //Holds orginal input from File (ex: 21-17)
	
	protected List<String> getMovesFromFile() {
		return movesFromFile;
	}
	
	/**
	 * Generates a map of Row-Column pairs for all 64 boxes of Checkers board
	 * The board is made of [row][column], 2 dimensional array where row & col
	 * range from 0 to 8 each. This method maps each box of this board to the
	 * specified naming convention of 1 to 32. The boxes which don't have specified
	 * numbers (1-32) are mapped to 0.
	 * Example: 21 is mapped to [5][1], 5 being the row & 1 being the column. 
	 * @return a Map<String, Integer> object
	 */
	private Map<String, Integer> matrix(){
		Map<String, Integer> hmap1 = new LinkedHashMap<String, Integer>();
		int count = 0;
		for(int row = 0; row < 8; row++) {
			for(int col = 0; col < 8; col++) {
				String temp1 = row + "-" + col;
				if(row % 2 == 0) { //even number of rows
					if(col % 2 == 0) { //even number of columns
						count = count + 1;
						hmap1.put(temp1, count);
					} else { //odd number of columns
						hmap1.put(temp1, 0);
					}
				} else { // odd number of rows
					if(col % 2 == 0) {
						hmap1.put(temp1, 0);
					} else {
						count = count + 1;
						hmap1.put(temp1, count);
					}
				}
			}// inner for-loop for columns
		}// outer for-loop for rows
		return hmap1;		
	}//end of method matrix()
	
	/**
	 * Reads input from the specified file path. Then translates the input to corresponding
	 * row and column values. Creates a String of the move (21-17 --> 5-1:4-0) and adds it to
	 * the List of Strings. Then it calls boardCoordinates method which converts this List of
	 * Strings to a String[].   
	 * @return String[] object of row & column values from the Map generated by matrix()
	 */
	protected String[] readInput() {
		Map<String, Integer> hmap2 = matrix();
		List<String> movesToBeSimulated = new ArrayList<String>();	
	    File file = new File("/Users/saurabhsomani/Desktop/checkersInput.txt");
	    Scanner sc = null;
	    
		try {
		   sc = new Scanner(file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		while(sc.hasNext()) {
			String tempStr    = sc.next();
			movesFromFile.add(tempStr);
			int leftValue     = getCoordinates(tempStr, 0);
			int rightValue    = getCoordinates(tempStr, 1);			
			String leftKey    = getKeyByValue(hmap2, leftValue);						
			String rightKey   = getKeyByValue(hmap2, rightValue);			
			String tempFromTo = leftKey + ':' + rightKey;
			movesToBeSimulated.add(tempFromTo);
		}		
		sc.close();
		String[] boardFromToValues  = boardCoordinates(movesToBeSimulated);
		return boardFromToValues;
	}//end of method readInput()
	
	/**
	 * Converts a List<String> into String[]
	 * @param movesToBeSimulated, List<String> of fromRow-fromCol:toRow-toCol passed by readInput()
	 * @return String[] object.
	 */
	protected String[] boardCoordinates(List<String> movesToBeSimulated) {
		String[] boardFromToValues = new String[movesToBeSimulated.size()];
		boardFromToValues          = movesToBeSimulated.toArray(boardFromToValues);
		return boardFromToValues;
	}//end of method boardCoordinates()
	
	/**
	 * Returns the row-column value from the Map generated by matrix() for the specified
	 * integer value in the input file.
	 * Example: 5-1 for 21.
	 * @param hmap2, Map<String,Integer> of row-column as keys and integer as a value (1 to 32 and 0)
	 * @param value, Integer value from the given input move (21 from 21-17).
	 * @return Key (row-column) of Map<String,Integer> generated by matrix().
	 */
	private String getKeyByValue(Map<String, Integer> hmap2, Integer value) {
        for (Entry<String, Integer> entry : hmap2.entrySet()) {
            if (value.equals(entry.getValue())) {
                return entry.getKey();
            }
        }
        return null;
	}//end of method getKeyByValue()
	
	/**
	 * Splits the inputString (21-17) into an integer array and returns the specified Integer
	 * value from the array. 
	 * @param inputString, String from input File (21-17).
	 * @param position, Integer Array index.
	 * @return Integer at specified index of the int array.
	 */
	protected int getCoordinates(String inputString, int position) {
		String[] arrOfStr = inputString.split("-");	
		return Integer.parseInt(arrOfStr[position]);
	}//end of method getCoordinates()	
}// end of class ReadFromFile